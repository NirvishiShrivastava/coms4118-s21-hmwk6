Following is the format of our inspect_pages program for process systemd with pid 1

$ ./inspect_pages 1
PID matched with subdirectory : 1.systemd
Reading Files in Directory: /mnt/1.systemd
# of Total Pages: 2298
# of Zero Pages: 28

--------------------------------------------------------------------------------------------------------------
We create a process in map_pages and malloc 20 PAGE_SIZE worth of space.

Then we memset 10 pages from them to 0 and calculate the pages count using our inspect_pages test program.
We could see that number of zero pages count became 10.

After that, out of those 10 pages, we assign some value to 4 pages and re-calculate the pages count.
Post this operation, the zero pages went back to 6.

Lastly, we scrub those 4 pages back to 0 value and see the zero pages count jump back to 10.

$ ./map_pages
CASE 1 - Allocating heap memory worth 20 pages
================================================
PID matched with subdirectory : 1759.map_pages
Reading Files in Directory: /mnt/1759.map_pages
# of Total Pages: 287
# of Zero Pages: 0


CASE 2 - Mapping 10 Zero Pages to value 0 
================================================
PID matched with subdirectory : 1759.map_pages
Reading Files in Directory: /mnt/1759.map_pages
# of Total Pages: 297
# of Zero Pages: 10

Press enter to transform few pages to non-zero pages:


CASE 3 - Transforming 4 pages to Non-Zero Pages
================================================
PID matched with subdirectory : 1759.map_pages
Reading Files in Directory: /mnt/1759.map_pages
# of Total Pages: 297
# of Zero Pages: 6

Press enter to scrub those 4 pages back to zero pages:


CASE 4 - Mapping all pages back to Zero Pages
================================================
PID matched with subdirectory : 1759.map_pages
Reading Files in Directory: /mnt/1759.map_pages
# of Total Pages: 297
# of Zero Pages: 10

----------------------------------------------------------------------------------------------------

Test for Total Page Count:

We created another program where we malloced 10 pages and set them to zero. Looking at the output from proc fs smaps_rollup
file, we were able to see that our total pages count was indeed equal to the RSS/4 value that comes from that file.

$./test
PID matched with subdirectory : 2002.test
Reading Files in Directory: /mnt/2002.test
# of Total Pages: 328
# of Zero Pages: 10


$ cat /proc/2002/smaps_rollup 
55af68b94000-7ffff3baf000 ---p 00000000 00:00 0                          [rollup]
Rss:                1312 kB
Pss:                 108 kB
Pss_Anon:             98 kB
Pss_File:             10 kB
Pss_Shmem:             0 kB
Shared_Clean:       1192 kB
Shared_Dirty:         44 kB
Private_Clean:         0 kB
Private_Dirty:        76 kB
Referenced:         1300 kB
Anonymous:           120 kB
LazyFree:              0 kB
AnonHugePages:         0 kB
ShmemPmdMapped:        0 kB
FilePmdMapped:        0 kB
Shared_Hugetlb:        0 kB
Private_Hugetlb:       0 kB
Swap:                  0 kB
SwapPss:               0 kB
Locked:                0 kB
